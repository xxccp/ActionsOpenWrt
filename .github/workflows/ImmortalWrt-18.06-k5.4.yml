name: EdgeRouter X ImmortalWrt-18.06

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-18.06-k5.4
  DIY_SH: OpenWrt-Lean.sh
  SSH_ACTIONS: false        # SSH 连接 Actions 功能
  UPLOAD_BIN_DIR: true      # 上传 bin 目录。即包含所有 ipk 文件和固件的目录
  UPLOAD_FIRMWARE: true     # 上传固件的目录
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai
  
jobs:
  merge:
    name: 编译OpenWrt固件
    runs-on: Ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: 校验本地文件
      uses: actions/checkout@main

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        ( sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx-ucl libelf-dev autoconf automake libtool autopoint device-tree-compiler ccache xsltproc rename antlr3 gperf wget curl swig rsync
        sudo -E apt-get -qq purge azure-cli ghc* zulu* hhvm llvm* firefox powershell openjdk* dotnet* google* mysql* php* android*
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean ) &
        sudo timedatectl set-timezone "$TZ"
        
    - name: 设置当前的日期
      id: date
      run: |
        echo "date=$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_ENV
        echo "date2=$(date +'%m/%d %Y')" >> $GITHUB_ENV
        echo "date3=$(date +'%m.%d')" >> $GITHUB_ENV
        echo "date4=$(date +'%m.%d.%H')" >> $GITHUB_ENV
        echo "DOCKERTAG=${{ secrets.DOCKER_ID }}/openwrt-6p:latest" >> $GITHUB_ENV
        VERSION="$(echo "${{github.event.action}}" | grep -Eo " [0-9.]+" | sed -e 's/ //')" || true
        [ "$VERSION" ] && echo "VERSION=$VERSION" >> $GITHUB_ENV || echo "VERSION=$(date +'%m.%d')" >> $GITHUB_ENV         
        
    - name: 克隆源代码
      env: 
        REPO_URL: https://github.com/immortalwrt/immortalwrt
        REPO_BRANCH: openwrt-18.06-k5.4
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        sed -i '$a src-git smpackage https://github.com/kenzok8/small-package' feeds.conf.default
    #- name: 自定义安装源
    #  working-directory: ./openwrt
    #  run: |
    #    git clone https://github.com/kenzok78/jeii package/jeii

    - name: 更新 & 安装 feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a   
        sed -i 's#192.168.1.1#10.1.0.1#g' package/base-files/files/bin/config_generate #定制默认IP
    - name: Generate configuration file
            run: |
              rm -f ./.config*
              touch ./.config
              
              
              
             #
             # ========================固件定制部分========================
             #
             #
             # 如果不对本区块做出任何编辑, 则生成默认配置固件.
             #
             # 以下为定制化固件选项和说明:
             #
             #
             # 有些插件/选项是默认开启的, 如果想要关闭, 请参照以下示例进行编写:
             #
             #          =========================================
             #         |  # 取消编译VMware镜像:                    |
             #         |  cat >> .config <<EOF                   |
             #         |  # CONFIG_VMDK_IMAGES is not set        |
             #         |  EOF                                    |
             #          =========================================
             #
             #
             # 以下是一些提前准备好的一些插件选项.
             # 直接取消注释相应代码块即可应用. 不要取消注释代码块上的汉字说明.
             # 如果不需要代码块里的某一项配置, 只需要删除相应行.
             #
             # 如果需要其他插件, 请按照示例自行添加.
             # 注意, 只需添加依赖链顶端的包. 如果你需要插件 A, 同时 A 依赖 B, 即只需要添加 A.
             #
             # 无论你想要对固件进行怎样的定制, 都需要且只需要修改 EOF 回环内的内容.
             #
             # 编译固件:
             cat >> .config <<EOF
             CONFIG_TARGET_ramips=y
             CONFIG_TARGET_ramips_mt7621=y
             CONFIG_TARGET_ramips_mt7621_DEVICE_ubnt_edgerouter-x=y
             EOF

             # IPv6支持:
             cat >> .config <<EOF
             #CONFIG_IPV6=y
             #CONFIG_KERNEL_IPV6=y
             CONFIG_PACKAGE_ipv6helper=y
             #CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
             #CONFIG_PACKAGE_ip6tables=y
             #CONFIG_PACKAGE_iptables-mod-extra=y
             EOF

             # 常用LuCI插件选择, 主要定制passwall与ssr-plus
             cat >> .config <<EOF
             CONFIG_PACKAGE_luci-app-adguardhome=y
             CONFIG_PACKAGE_luci-app-adguardhome_INCLUDE_binary=y
             CONFIG_PACKAGE_luci-app-advanced-reboot=y
             CONFIG_PACKAGE_luci-app-advancedsetting=y
             CONFIG_PACKAGE_luci-app-argon-config=y
             CONFIG_PACKAGE_luci-app-bypass_INCLUDE_ShadowsocksR_Libev_Client=y
             CONFIG_PACKAGE_luci-app-bypass_INCLUDE_Simple_Obfs=y
             CONFIG_PACKAGE_luci-app-bypass_INCLUDE_Xray=y
             CONFIG_PACKAGE_luci-app-bypass_INCLUDE_Socks_Server=y
             CONFIG_PACKAGE_luci-app-diskman_INCLUDE_btrfs_progs=y
             CONFIG_PACKAGE_luci-app-diskman_INCLUDE_lsblk=y
             CONFIG_PACKAGE_luci-app-filetransfer=y
             CONFIG_PACKAGE_luci-app-firewall=y
             CONFIG_PACKAGE_luci-app-frpc=y
             CONFIG_PACKAGE_luci-app-mwan3=y
             CONFIG_PACKAGE_luci-app-mwan3helper=y
             CONFIG_PACKAGE_luci-app-netdata=y
             CONFIG_PACKAGE_luci-app-nlbwmon=y
             CONFIG_PACKAGE_luci-app-opkg=y
             CONFIG_PACKAGE_luci-app-passwall_Transparent_Proxy=y
             CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ChinaDNS_NG=y
             CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Libev_Client=y
             CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ShadowsocksR_Libev_Client=y
             CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Simple_Obfs=y
             CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Trojan_Plus=y
             CONFIG_PACKAGE_luci-app-passwall2_Transparent_Proxy=y
             CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Shadowsocks_Libev_Client=y
             CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_ShadowsocksR_Libev_Client=y
             CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Simple_Obfs=y
             CONFIG_PACKAGE_luci-app-rclone_INCLUDE_rclone-webui=y
             CONFIG_PACKAGE_luci-app-rclone_INCLUDE_rclone-ng=y
             CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Xray=y
             CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_IPT2Socks=y
             CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks_Libev_Client=y
             CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Libev_Client=y
             CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Simple_Obfs=y
             CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Trojan=y
             CONFIG_PACKAGE_luci-app-syncdial=y
             CONFIG_PACKAGE_luci-app-ttyd=y
             CONFIG_PACKAGE_luci-app-turboacc=y
             CONFIG_PACKAGE_TURBOACC_INCLUDE_OFFLOADING=y
             CONFIG_PACKAGE_TURBOACC_INCLUDE_BBR_CCA=y
             CONFIG_PACKAGE_luci-app-udpxy=y
             CONFIG_PACKAGE_luci-app-upnp=y
             CONFIG_PACKAGE_luci-app-vssr=y
             CONFIG_PACKAGE_luci-app-vssr_INCLUDE_Hysteria=y
             CONFIG_PACKAGE_luci-app-vssr_INCLUDE_Kcptun=y
             CONFIG_PACKAGE_luci-app-vssr_INCLUDE_ShadowsocksR_Libev_Server=y
             CONFIG_PACKAGE_luci-app-vssr_INCLUDE_Trojan=y
             CONFIG_PACKAGE_luci-app-vssr_INCLUDE_Xray=y
             CONFIG_PACKAGE_luci-app-vssr_INCLUDE_Xray_plugin=y
             CONFIG_PACKAGE_luci-app-watchcat=y
             CONFIG_PACKAGE_luci-app-wireguard=y
             CONFIG_PACKAGE_luci-app-wolplus=y
             CONFIG_PACKAGE_luci-app-wrtbwmon=y
             CONFIG_PACKAGE_luci-app-zerotier=y
             # end of 3. Applications
             EOF
             # LuCI主题:
             cat >> .config <<EOF
             CONFIG_PACKAGE_luci-theme-argon-dark-mod=y
             CONFIG_PACKAGE_luci-theme-argon-light-mod=y
             CONFIG_PACKAGE_luci-theme-material=y
             CONFIG_PACKAGE_luci-theme-netgear=y
             EOF
             # 常用软件包:
             cat >> .config <<EOF
             CONFIG_PACKAGE_curl=y
             CONFIG_PACKAGE_htop=y
             CONFIG_PACKAGE_nano=y
             CONFIG_PACKAGE_screen=y
             CONFIG_PACKAGE_tree=y
             CONFIG_PACKAGE_vim-fuller=y
             CONFIG_PACKAGE_wget=y
             EOF
             # ========================固件定制部分结束========================
             # 
             sed -i 's/^[ \\t]*//g' ./.config
             make defconfig
          - name: Make download
            run: |
              make download -j8
              find ./dl/ -size -1024c -exec rm -f {} \\;
              df -h
          - name: Compile firmware
            run: |
              make -j$(nproc) || make -j1 V=s
              echo "======================="
              echo "Space usage:"
              echo "======================="
              df -h
              echo "======================="
              du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
              du -h --max-depth=1 ./build_dir
              du -h --max-depth=1 ./bin
          # - name: Prepare artifact
          #   run: find ./bin/targets/ -type d -name "packages" | xargs rm -rf {}

          # 因为我需要得到编译后的ipk插件，所以我选择将完整的/bin/上传
          - name: Upload artifact
            uses: actions/upload-artifact@master
            with:
              name: OpenWrt firmware
              path: ./bin/
